name: Python Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/python-backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  # Python Backend Testing
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Lint with flake8
        run: |
          flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 api/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: black --check api/

      - name: Run tests
        run: |
          pytest api/ --cov=api --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: python-backend
          name: python-coverage

  # Security Scan for Python
  security-scan-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install safety bandit

      - name: Run safety check
        run: safety check

      - name: Run bandit security scan
        run: bandit -r api/ -f json -o bandit-report.json || true

      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: backend/bandit-report.json

  # Build and Test ML Model
  ml-model-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install jupyter

      - name: Test ML model loading
        run: |
          python -c "
          import joblib
          import os
          model_path = 'models/cat_clf.pkl'
          if os.path.exists(model_path):
              model = joblib.load(model_path)
              print('✅ ML model loaded successfully')
          else:
              print('❌ ML model not found')
              exit(1)
          "

      - name: Test API endpoints
        run: |
          python -c "
          from api.app import app
          with app.test_client() as client:
              # Test health check
              response = client.get('/health')
              print(f'Health check status: {response.status_code}')
              
              # Test prediction endpoint
              test_data = {'age': 25, 'weight': 60, 'height': 165, 'bmi': 22.0}
              response = client.post('/predict', json=test_data)
              print(f'Prediction test status: {response.status_code}')
          "

  # Deploy to Heroku (on main branch)
  deploy-backend:
    needs: [test-backend, ml-model-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | heroku container:login
          heroku container:push web -a ${{ secrets.HEROKU_APP_NAME }}
          heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/foresee-cycles-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/foresee-cycles-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 